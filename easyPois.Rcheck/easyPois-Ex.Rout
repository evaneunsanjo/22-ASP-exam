
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "easyPois"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "easyPois-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('easyPois')

Attaching package: 'easyPois'

The following object is masked from 'package:stats':

    logLik

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("estimatePois")
> ### * estimatePois
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: estimatePois
> ### Title: estimatePois function for MLE calculation
> ### Aliases: estimatePois
> 
> ### ** Examples
> 
> set.seed(10)
> y <- sample(x=1:10, size=2000, replace=TRUE)
> estimatePois(y, lambda = 10, SEtype = "bootstrap")
An object of class "PoisMLE"
Slot "y":
   [1]  9 10  7  8  6  7  3  8 10  7 10  2  8  8  7  6  7  6  2  5  9  2 10  5
  [25] 10  1  7 10  2  9  4  2  8  3  6  2  1 10 10  1  9  9  8  5 10  9  1  7
  [49]  8  2  4  3  1  3 10 10 10  7 10  5  3  5  5  7  3  6  9  2  3  6 10 10
  [73]  9  5 10 10  2  9  4  4  3  7  1  4  6  9  3  9  9  1  6 10  7  9  8  9
  [97]  4  3  3  3  6 10  1  6  8  6  5  4  8  5  2  7  1  9  1  4  8  6  5  4
 [121]  7  2  1  1  7  8  6  5  3 10 10  8  6  5  9  2  1  7  5  6  5  6  3  3
 [145]  8  8  6  2  5  9  6  3  8  4  1  1  8  7 10  6  7  4  1  4 10  5  8  5
 [169]  5  2 10  6  7  6  4  6  9  6  3  2  1  8  7  7  1  1  3  9  6  6  7 10
 [193]  2  1  4  6  3  7  7  9  2  4  8  5  9  1  4  9  4  2  8  9 10  5 10  8
 [217]  5 10  9  7  6  6  1  3  7  4  4  2  7  4  4  4  4 10  9  9  8  1  2  5
 [241]  8  3  4  6  7  9  6  1  2 10  1 10  4  1  3  9  1  5 10  4 10  5  9  6
 [265]  4  9  6  9  1 10  7  6  4  8  2  5  5  3  7  1 10  5  3  1  5  5  6 10
 [289]  4  6  2  8  5  1  2  6  4  4  8  1  4  5  2  7  4  8  9  4  2  9  3  3
 [313]  1  2  5 10  9  8  9  4  4  6  8  7  9  3  7  9  2  5  2  2  7  4  7 10
 [337]  2  1  5  3  7  2 10  8 10  3  9  5  2  6  3  9  3  7 10 10  7  8  6 10
 [361]  2  5 10 10  5  9  8  4  3  6  7  5  7 10  3  7  9  3  3  4  6  3  5  1
 [385]  1 10  9  3  1  4  6  8 10  8 10  2  8 10  1  8  1  3  5  5  1  2  7  2
 [409]  3  7  1  7  8  4  3  5  4  9  8  6  4  4  3  4  7  8  2  7  4  5  3 10
 [433]  1  5  8  9  7  3  3  3 10  1  6  4  5  4  8 10  1  3  9  1  4  3  5  7
 [457]  5  1 10  6 10 10  5  1  5  7  6  2  5  3  8  9  4  6  3  9 10  5  6  5
 [481] 10  2  9  2  7  4 10 10  2  6  5  7  1  8  1  3  4 10  1  4  8  5  9 10
 [505]  9  5  5  8  4  9 10  8  3  1  9  8  9  5  1  8 10  9  1  4  1  7  8  7
 [529]  7  1  2  3  8  1 10  1  5  8  9  2  1  1  4  2  3  8  2  7  1  8  3 10
 [553]  8  9  5  4  2  5  5  7  9 10  3  6  1  3 10  2  4  7 10  9  2  2  3  2
 [577]  5 10  3  8  4 10  4  3  7  5  3  5  4  1  8  9  2  6  2  5  9  2  8  9
 [601]  7  2 10  6  6  2  2 10  9  4  5  7  2  6  6  6  5  4  3  2  3  8 10  7
 [625]  2  8  8  8  3 10  6  3  7  3  3  6  8  7  3 10  3 10  5 10  3  3 10  5
 [649]  4  6  8  1  5  5  5  7  7  9  4  2 10 10  8  2  9  8  6  9 10  6  2  3
 [673]  4  1  2  1  7  5  4  4  3  8  7  6  2  8 10  3  4  7  7  8 10  2  5  9
 [697] 10  5  1  8  8  8  7  8  5  1  5  5  4  9  8  8  4  8  7  1  6 10  9  1
 [721]  2  8 10  1  9  1  3  1  6  5  5  5 10 10  2  4 10  4  8  3 10  3  2 10
 [745]  6  7  7  8  3 10  9  1  1  6  4 10  9  7 10  6 10  6  5  4  8  1  1  4
 [769]  6  6  5  2  7 10  4  5  5  2  1  9  9  2  9  1  5  3  5  2  4  2  7  6
 [793]  3  9  8  1  1  3  8 10 10  2  7  8  3  1  8  8  1  2  5  4  7  9  4 10
 [817]  7  2  6  4  8  9 10  6  4  8  2  3  3  9  1  7  9  6  7  2  6  8  9  7
 [841]  1 10  1  8  1  3  2  9  9  6  1  4  5  9  3  7  2  1  8  4  4  7  7  9
 [865]  4  7  6  5 10  9  8  5  9  6  8  6  1  6  1  2  5  7  3  5  2  5  3  3
 [889]  9  2  2  2  8 10  9  5  6  2  5  5  6  5  1 10  3  4  3  4  2  8  1  6
 [913]  8  3  2  9  4  9  7  4 10  6  6  5  3  7  5 10  7  3  8 10  4  6  3  7
 [937]  9  4  9  4 10  1 10  5  8  7  7 10  1 10 10  2  6  8 10  6  6  4  5  6
 [961]  9  6  3 10  1  1  3  6  2  1  1  9  2  3  3  2  7  1 10  3  7  6  9  8
 [985]  8 10  9  9  4  4  5  2 10  1  9  3  5  5  3  7  6  5  3 10 10  7  8 10
[1009]  5  9  9  4  3  6 10  3  5  4  4  2 10  4  8  8  2  3  9  2  8 10  9  8
[1033]  5  3  5  8  8  6  5  1  3  9  2  8  3  8  2 10  9  5  6  9  7  8  6  4
[1057]  2  6  4  2  7 10  2  6  8  4  3  5  7  7  7  9 10  5  3  5  4  6  7  1
[1081]  1  2  8  1  5  8  2 10 10  2  1  9  2 10  1  7 10  6  5 10  2  2 10  6
[1105]  7  7  4  9  1  5  6  2  6  4  9  6  5  3  5  7  2  4  1  2  4  5  1  1
[1129]  8  9  9  8  1  9  1  6  9  7  1  2  3  2  6  1  4  2  2  1  7 10  3  5
[1153]  2  8  4  5  2  8 10  5 10  8  6 10  8  6  3  8  9  7  3  9  9  5  6  2
[1177]  3  8 10  3  5  2  3  8  2  1  5  5  4  3  7  7  8  4  6  3  9  9  7  8
[1201]  3  7  5  1 10  1  6  8  6  9  4  4  8  2  6  8  6 10  3  5  8  8  8  8
[1225]  1  8  7  3  2  6  3  8  2  4  4  6  2  9  6  6  6  6  2  3  5  9  1  9
[1249]  5  8  3  8 10  3  6  3  6  7  2  1  3  8  6  2  3  4  3  3  2  3  4  1
[1273]  3  1  4  8  8  3  7  3  6  3  7  8  5  7  7  8  1  2  2  6  6  9 10 10
[1297]  3  5 10  6  6  5  5  7  3  5  8  7  4  2  5  5 10  5  8  7  3  2  9  1
[1321]  9  9  3 10 10 10  8  6  7  9  3  9 10  1  4  7  3 10  7  5  4  7  2  3
[1345]  2  8  9  6  5  7  5  7  9  9  7  9  2  7  6  7 10  9  9  8  4  5  2  3
[1369]  8  5 10  1 10  2  7  7  2  7 10  5  9  5  3  8  2  3  3  6  9  2  5  5
[1393]  7  2  9  8  4  9  1  4  8  6  5  9 10 10  6  1  1  5 10 10  9  4  3  8
[1417]  3  7  7  2  3  5  6  7  3  8  2  5  9  4  4  9  2  7  2  8  2  6  2  3
[1441]  1  3  1 10  9  6  8  1  8  2  8  7  7  6  2  7  6  2  2  9  7  6  5  6
[1465]  3  7  7  1  2  3  1  5  5  8  7  9  4  7  1  6  9  8  3  5  3  1  5  9
[1489] 10  2  6  6 10  1  7  9  1  4  4  8  3  5  7  8  3  2  5  2  4  3  4  8
[1513]  7  3  2  5  1  9 10  1  1  8  3  5  2  3  7  9  7  5  6  5  9  1  1  2
[1537]  7 10  2  3  9  5  8  7  2  9  5 10  9  3  2  4  7  5  2  9  8 10  3 10
[1561]  4  2  6  3  7  5  8  8  2  2  4  2  3  3  8  7  9  9  1 10  9  8  5  6
[1585]  6  2  2  5  5  1  1  5  6  3  6  5  5  5  9  6  5  5  6  7  5  8  5  9
[1609]  7  6  5  8  9  7  7  2  4  2  7  5  5  5  7  9  8  5  5  1 10  2  5  4
[1633]  9  2  5  3 10  5  9  9  2  1  7  9  3  9  8  6  5  1  9  6  8  1  5  6
[1657] 10  8  2  1  9  6  1  7  2  5  7  6  5  1  8  1  5  2  6 10  5  1  2  6
[1681]  5 10  9  4  4  6  8  5  8  9  4  3  9  5  5  6  2  5  3  6  1  4  1  9
[1705]  2  9  9  6  8  7  8  1  6  8  9  3 10 10  8  4  6  1  2 10  5  3 10  1
[1729]  9  8 10  9  7  3  4  6  8  9  3  1  7  8  5  8  4  3  6  4  4 10  6  2
[1753]  5  6  9  4  3  2  2  3  4  3  5  9  6  6  8  5  4  5  7 10  7  1  5 10
[1777]  9  6  8  1  1  4  4  7  4 10  1  3  4  3  5  6  7  3  3  8  5 10  5 10
[1801]  2  7 10  4  1  4  7  7  4  8  8  2  8 10 10  7  3  1  9 10 10  9  7  5
[1825]  2  5  9  2  8  6  3  3  1  4  1 10  4  9  7  2  4  7  8  3  8  2  6  5
[1849] 10  9  8  5  8  5  4  9  4  2  7  5  7  5 10  8  8  1  9  8 10  9  9  5
[1873]  1  3  1 10  7  1  2  4  6  4  8  1  2  8  6  1  7  8  6  7  9  2 10  9
[1897]  3  1  7  3  6  4  5  8  1  6  2  2  3  6  9 10  5  9  3  8  5  4  2 10
[1921]  2  8  9  1  1  6  3  6  4  2 10  4  1  6 10  6  5  3  3  3  7 10  6  7
[1945]  8  3  2  8  8  3  8  2  1  3  7  7  3  1  7  4  3  9  3  2  8  6  2  2
[1969]  2  8  3  7  9  5  8 10  9  9 10 10  3  3  6  9  3  7  5 10 10  7  5 10
[1993]  1  6  7  8  1  1  5  3

Slot "MLE":
[1] 5.55

Slot "LL":
[1] -7418.416

Slot "SEtype":
[1] "bootstrap"

Slot "SE":
[1] 0.06149947

> estimatePois(y, lambda = 10, SEtype= "basic")
An object of class "PoisMLE"
Slot "y":
   [1]  9 10  7  8  6  7  3  8 10  7 10  2  8  8  7  6  7  6  2  5  9  2 10  5
  [25] 10  1  7 10  2  9  4  2  8  3  6  2  1 10 10  1  9  9  8  5 10  9  1  7
  [49]  8  2  4  3  1  3 10 10 10  7 10  5  3  5  5  7  3  6  9  2  3  6 10 10
  [73]  9  5 10 10  2  9  4  4  3  7  1  4  6  9  3  9  9  1  6 10  7  9  8  9
  [97]  4  3  3  3  6 10  1  6  8  6  5  4  8  5  2  7  1  9  1  4  8  6  5  4
 [121]  7  2  1  1  7  8  6  5  3 10 10  8  6  5  9  2  1  7  5  6  5  6  3  3
 [145]  8  8  6  2  5  9  6  3  8  4  1  1  8  7 10  6  7  4  1  4 10  5  8  5
 [169]  5  2 10  6  7  6  4  6  9  6  3  2  1  8  7  7  1  1  3  9  6  6  7 10
 [193]  2  1  4  6  3  7  7  9  2  4  8  5  9  1  4  9  4  2  8  9 10  5 10  8
 [217]  5 10  9  7  6  6  1  3  7  4  4  2  7  4  4  4  4 10  9  9  8  1  2  5
 [241]  8  3  4  6  7  9  6  1  2 10  1 10  4  1  3  9  1  5 10  4 10  5  9  6
 [265]  4  9  6  9  1 10  7  6  4  8  2  5  5  3  7  1 10  5  3  1  5  5  6 10
 [289]  4  6  2  8  5  1  2  6  4  4  8  1  4  5  2  7  4  8  9  4  2  9  3  3
 [313]  1  2  5 10  9  8  9  4  4  6  8  7  9  3  7  9  2  5  2  2  7  4  7 10
 [337]  2  1  5  3  7  2 10  8 10  3  9  5  2  6  3  9  3  7 10 10  7  8  6 10
 [361]  2  5 10 10  5  9  8  4  3  6  7  5  7 10  3  7  9  3  3  4  6  3  5  1
 [385]  1 10  9  3  1  4  6  8 10  8 10  2  8 10  1  8  1  3  5  5  1  2  7  2
 [409]  3  7  1  7  8  4  3  5  4  9  8  6  4  4  3  4  7  8  2  7  4  5  3 10
 [433]  1  5  8  9  7  3  3  3 10  1  6  4  5  4  8 10  1  3  9  1  4  3  5  7
 [457]  5  1 10  6 10 10  5  1  5  7  6  2  5  3  8  9  4  6  3  9 10  5  6  5
 [481] 10  2  9  2  7  4 10 10  2  6  5  7  1  8  1  3  4 10  1  4  8  5  9 10
 [505]  9  5  5  8  4  9 10  8  3  1  9  8  9  5  1  8 10  9  1  4  1  7  8  7
 [529]  7  1  2  3  8  1 10  1  5  8  9  2  1  1  4  2  3  8  2  7  1  8  3 10
 [553]  8  9  5  4  2  5  5  7  9 10  3  6  1  3 10  2  4  7 10  9  2  2  3  2
 [577]  5 10  3  8  4 10  4  3  7  5  3  5  4  1  8  9  2  6  2  5  9  2  8  9
 [601]  7  2 10  6  6  2  2 10  9  4  5  7  2  6  6  6  5  4  3  2  3  8 10  7
 [625]  2  8  8  8  3 10  6  3  7  3  3  6  8  7  3 10  3 10  5 10  3  3 10  5
 [649]  4  6  8  1  5  5  5  7  7  9  4  2 10 10  8  2  9  8  6  9 10  6  2  3
 [673]  4  1  2  1  7  5  4  4  3  8  7  6  2  8 10  3  4  7  7  8 10  2  5  9
 [697] 10  5  1  8  8  8  7  8  5  1  5  5  4  9  8  8  4  8  7  1  6 10  9  1
 [721]  2  8 10  1  9  1  3  1  6  5  5  5 10 10  2  4 10  4  8  3 10  3  2 10
 [745]  6  7  7  8  3 10  9  1  1  6  4 10  9  7 10  6 10  6  5  4  8  1  1  4
 [769]  6  6  5  2  7 10  4  5  5  2  1  9  9  2  9  1  5  3  5  2  4  2  7  6
 [793]  3  9  8  1  1  3  8 10 10  2  7  8  3  1  8  8  1  2  5  4  7  9  4 10
 [817]  7  2  6  4  8  9 10  6  4  8  2  3  3  9  1  7  9  6  7  2  6  8  9  7
 [841]  1 10  1  8  1  3  2  9  9  6  1  4  5  9  3  7  2  1  8  4  4  7  7  9
 [865]  4  7  6  5 10  9  8  5  9  6  8  6  1  6  1  2  5  7  3  5  2  5  3  3
 [889]  9  2  2  2  8 10  9  5  6  2  5  5  6  5  1 10  3  4  3  4  2  8  1  6
 [913]  8  3  2  9  4  9  7  4 10  6  6  5  3  7  5 10  7  3  8 10  4  6  3  7
 [937]  9  4  9  4 10  1 10  5  8  7  7 10  1 10 10  2  6  8 10  6  6  4  5  6
 [961]  9  6  3 10  1  1  3  6  2  1  1  9  2  3  3  2  7  1 10  3  7  6  9  8
 [985]  8 10  9  9  4  4  5  2 10  1  9  3  5  5  3  7  6  5  3 10 10  7  8 10
[1009]  5  9  9  4  3  6 10  3  5  4  4  2 10  4  8  8  2  3  9  2  8 10  9  8
[1033]  5  3  5  8  8  6  5  1  3  9  2  8  3  8  2 10  9  5  6  9  7  8  6  4
[1057]  2  6  4  2  7 10  2  6  8  4  3  5  7  7  7  9 10  5  3  5  4  6  7  1
[1081]  1  2  8  1  5  8  2 10 10  2  1  9  2 10  1  7 10  6  5 10  2  2 10  6
[1105]  7  7  4  9  1  5  6  2  6  4  9  6  5  3  5  7  2  4  1  2  4  5  1  1
[1129]  8  9  9  8  1  9  1  6  9  7  1  2  3  2  6  1  4  2  2  1  7 10  3  5
[1153]  2  8  4  5  2  8 10  5 10  8  6 10  8  6  3  8  9  7  3  9  9  5  6  2
[1177]  3  8 10  3  5  2  3  8  2  1  5  5  4  3  7  7  8  4  6  3  9  9  7  8
[1201]  3  7  5  1 10  1  6  8  6  9  4  4  8  2  6  8  6 10  3  5  8  8  8  8
[1225]  1  8  7  3  2  6  3  8  2  4  4  6  2  9  6  6  6  6  2  3  5  9  1  9
[1249]  5  8  3  8 10  3  6  3  6  7  2  1  3  8  6  2  3  4  3  3  2  3  4  1
[1273]  3  1  4  8  8  3  7  3  6  3  7  8  5  7  7  8  1  2  2  6  6  9 10 10
[1297]  3  5 10  6  6  5  5  7  3  5  8  7  4  2  5  5 10  5  8  7  3  2  9  1
[1321]  9  9  3 10 10 10  8  6  7  9  3  9 10  1  4  7  3 10  7  5  4  7  2  3
[1345]  2  8  9  6  5  7  5  7  9  9  7  9  2  7  6  7 10  9  9  8  4  5  2  3
[1369]  8  5 10  1 10  2  7  7  2  7 10  5  9  5  3  8  2  3  3  6  9  2  5  5
[1393]  7  2  9  8  4  9  1  4  8  6  5  9 10 10  6  1  1  5 10 10  9  4  3  8
[1417]  3  7  7  2  3  5  6  7  3  8  2  5  9  4  4  9  2  7  2  8  2  6  2  3
[1441]  1  3  1 10  9  6  8  1  8  2  8  7  7  6  2  7  6  2  2  9  7  6  5  6
[1465]  3  7  7  1  2  3  1  5  5  8  7  9  4  7  1  6  9  8  3  5  3  1  5  9
[1489] 10  2  6  6 10  1  7  9  1  4  4  8  3  5  7  8  3  2  5  2  4  3  4  8
[1513]  7  3  2  5  1  9 10  1  1  8  3  5  2  3  7  9  7  5  6  5  9  1  1  2
[1537]  7 10  2  3  9  5  8  7  2  9  5 10  9  3  2  4  7  5  2  9  8 10  3 10
[1561]  4  2  6  3  7  5  8  8  2  2  4  2  3  3  8  7  9  9  1 10  9  8  5  6
[1585]  6  2  2  5  5  1  1  5  6  3  6  5  5  5  9  6  5  5  6  7  5  8  5  9
[1609]  7  6  5  8  9  7  7  2  4  2  7  5  5  5  7  9  8  5  5  1 10  2  5  4
[1633]  9  2  5  3 10  5  9  9  2  1  7  9  3  9  8  6  5  1  9  6  8  1  5  6
[1657] 10  8  2  1  9  6  1  7  2  5  7  6  5  1  8  1  5  2  6 10  5  1  2  6
[1681]  5 10  9  4  4  6  8  5  8  9  4  3  9  5  5  6  2  5  3  6  1  4  1  9
[1705]  2  9  9  6  8  7  8  1  6  8  9  3 10 10  8  4  6  1  2 10  5  3 10  1
[1729]  9  8 10  9  7  3  4  6  8  9  3  1  7  8  5  8  4  3  6  4  4 10  6  2
[1753]  5  6  9  4  3  2  2  3  4  3  5  9  6  6  8  5  4  5  7 10  7  1  5 10
[1777]  9  6  8  1  1  4  4  7  4 10  1  3  4  3  5  6  7  3  3  8  5 10  5 10
[1801]  2  7 10  4  1  4  7  7  4  8  8  2  8 10 10  7  3  1  9 10 10  9  7  5
[1825]  2  5  9  2  8  6  3  3  1  4  1 10  4  9  7  2  4  7  8  3  8  2  6  5
[1849] 10  9  8  5  8  5  4  9  4  2  7  5  7  5 10  8  8  1  9  8 10  9  9  5
[1873]  1  3  1 10  7  1  2  4  6  4  8  1  2  8  6  1  7  8  6  7  9  2 10  9
[1897]  3  1  7  3  6  4  5  8  1  6  2  2  3  6  9 10  5  9  3  8  5  4  2 10
[1921]  2  8  9  1  1  6  3  6  4  2 10  4  1  6 10  6  5  3  3  3  7 10  6  7
[1945]  8  3  2  8  8  3  8  2  1  3  7  7  3  1  7  4  3  9  3  2  8  6  2  2
[1969]  2  8  3  7  9  5  8 10  9  9 10 10  3  3  6  9  3  7  5 10 10  7  5 10
[1993]  1  6  7  8  1  1  5  3

Slot "MLE":
[1] 5.55

Slot "LL":
[1] -7418.416

Slot "SEtype":
[1] "basic"

Slot "SE":
[1] 0.05267827

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("estimatePois", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("logLik")
> ### * logLik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: logLik
> ### Title: Log Likelihood of a Poisson Distribution
> ### Aliases: logLik loglik
> 
> ### ** Examples
> 
> set.seed(10)
> y <- sample(x=1:10, size=2000, replace=TRUE)
> logLik(y, 10)
[1] -7418.416
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("logLik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mle")
> ### * mle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mle
> ### Title: Returns Maximum Likelihood of a Poisson Distribution
> ### Aliases: mle poismle
> 
> ### ** Examples
> 
> y <- sample(x=1:10, size=2000, replace=TRUE)
> mle(y)
[1] 5.6235
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("standardError")
> ### * standardError
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: standardError
> ### Title: Calculates the standard error of an MLE estimator
> ### Aliases: standardError seCalculate se
> 
> ### ** Examples
> 
> set.seed(10)
> y <- sample(x=1:10, size=2000, replace=TRUE)
> standardError(y, SEtype= "basic")
[1] 0.05267827
> standardError(y, SEtype= "bootstrap")
[1] 0.06149947
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("standardError", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.8 0.13 0.92 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
