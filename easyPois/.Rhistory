logLik <- function(y, lambda){
likelihood = -length(y) * lambda - sum(log(exp(lfactorial(y)))) + log(lambda) * sum(y)
return(likelihood)}
?lfactorial
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
logLik(y, 10)
?logLik
?'logLik'
mle <- function(y){
if (any(y < 0)) {
stop("For maximum likelihood, values of y must be greater or equal to 0")
}
return(sum(y)/length(y))
}
y = c(1:10)
mle(y)
se<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(nboot <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
se(y, SEtype= "bootstrap", B= 300)
se(y, SEtype= "test")
se<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
se(y, SEtype= "bootstrap", B= 300)
se(y, SEtype= "test")
se(y, SEtype= "bootstrap")
se(y, SEtype= "basic")
?mle
??mle
?standardError
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap", B=200)){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
estimatePois_basic <- estimatePois(y, 2, "basic")
standardError<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
estimatePois_boot <- estimatePois(y, 2, "bootstrap")
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap"), B=200){
y <- y
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap"), B=200){
y <- y
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
estimatePois_basic <- estimatePois(y, 2, "basic")
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap"), B=200){
y <- y
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
estimatePois(y, lambda = 10, SEtype= "bootstrap")
estimatePois_basic <- estimatePois(y, 2, "basic")
estimatePois <- function(y, lambda,
SEtype = c("basic", "bootstrap"), B=200){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
estimateP <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(estimateP)
}
estimatePois(y, lambda = 10, SEtype= "bootstrap")
estimatePois <- function(y, lambda,
SEtype = c("basic", "bootstrap"), B=200){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
estimateP <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(estimateP)
}
estimatePois(y, lambda = 10, SEtype= "bootstrap")
estimatePois <-function(y, lambda,
SEtype = c("basic", "bootstrap"), B=100){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
PoisMLE_obj <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(PoisMLE_obj)
}
estimatePois_basic <- estimatePois(y, 2, "basic")
func <- function(y, lambda,
SEtype = c("basic", "bootstrap"), B=100){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
PoisMLE_obj <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(PoisMLE_obj)
}
estimatePois_basic <- estimatePois(y, 2, "basic")
estimatePois <- function(y, lambda,
SEtype = c("basic", "bootstrap"), B=100){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
PoisMLE_obj <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(PoisMLE_obj)
}
estimatePois_basic <- estimatePois(y, 2, "basic")
logLik <- function(y, lambda){
if (any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if (lambda < 0) {
stop("For log likelihood, lambda must be of a value greater than 0.")
}
LL <- -length(y)*lambda - sum(log(exp(lfactorial(y)))) + log(lambda)*sum(y)
return(LL)
}
mle <- function(y){
if (any(y < 0)) {
stop("For maximum likelihood, values of y must be greater or equal to 0")
}
return(sum(y)/length(y))
}
standardError<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
estimatePois_basic <- estimatePois(y, 2, "basic")
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
estimatePois_basic <- estimatePois(y, 2, "basic")
library(easyPois)
setValidity("PoisMLE", function(object){
y_classtest <- is.numeric(object@y)
if (!y_classtest){stop("Y must be of numeric class.")}
MLE_classtest <- is.numeric(object@MLE)
if (!MLE_classtest){stop("MLE must be of numeric class.")}
LL_classtest <- is.numeric(object@LL)
if (!LL_classtest){stop("LL must be of numeric class.")}
SE_classtest <- is.numeric(object@SE)
if (!SE_classtest){stop("SE must be of numeric class.")}
LL_classtest <- is.numeric(object@SEtype)
if (!SEtype_classtest){stop("SEtype must be of character class.")}
}
)
estimatePois_basic <- estimatePois(y, 2, "basic")
estimatePois_basic <- estimatePois(y, lambda = 2, SEtype= "basic")
estimatePois_basic <- estimatePois(y, lambda = 2, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype= "bootstrap")
?new
library(easyPois)
library(easyPois)
## Creating a method that takes in numeric value and draw a number, see if they match
# creating a generic method, referencing lecture slide 15
PlayGame <- function(door){
UseMethod("PlayGame")
}
library(easyPois)
?loglik
?mle
?standardError
?estimatePois
estimatePois(y, 2, SEtype="basic", B=100)
estimatePois(y, 2, basic, B=100)
library(easyPois)
library(easyPois)
estimatePois(y, 2, basic)
estimatePois(y, lambda = 10, SEtype = "bootstrap")
se<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
se<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
se(y, SEtype= "bootstrap")
se(y, SEtype= "basic")
library(easyPois)
library(easyPois)
estimatePois(y, lambda = 10, SEtype = "bootstrap")
estimatePois(y, lambda = 2, SEtype= "basic")
?estimatePois
?'PoisMLE'
?'PoisMLE'
value <- estimatePois(y, lambda = 10, SEtype= "basic")
plot <- function(pmobject){
d <- y
mle <- MLE
se <- StandardError
# calculate lowerbound and upperbound using slots in PoisMLE object
lowerbound <- mle - 1.96 * se
upperbound <- mle + 1.96 * se
# create density plot
# mark MLE value using dotted red-line with abline() function
# draw error bar 1.96 standard error away from the MLE in black
plot(d,
main = 'Density of y values',
sub = 'MLE in Red. Interval in Black.')
abline(v = mle,
col="red",
lty = 2,
lwd = 1)
arrows(x0 = lowerbound,
y0 = 0,
x1 = upperbound,
y1 = 0,
code = 3,
angle = 90,
lwd = 1,
length = 0.1)
}
plot(value)
plot <- function(x, y, ...){
MLE <- x@MLE
UPB <- x@MLE + 1.96*x@SE
LWB <- x@MLE - 1.96*x@SE
plot(MLE, xlab = "", ylab = "MLE Estimate", main = "MLE estimate with 95% CI", cex=2, xaxt='n')
arrows(x0=1, y0=LWB, x1=1, y1=UPB, code=3, angle=90, length=0.1, col="blue", lwd=2)
}
estimatePois_basic <- estimatePois(y, lambda = 2, SEtype= "basic")
plot(estimatePois_basic)
plotMLE <- function(y,SEtype,B=1000,lambda_width=2.5)
plotMLE(y,"basic")
plotMLE(y,"basic")
y <- rpois(1000,80)
plotMLE(y,"basic")
library(easyPois)
devtools::check()
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
logLik(y, 10)
mle(y)
standardError(y, SEtype= "bootstrap", B= 300)
standardError(y, SEtype= "test")
estimatePois(y, lambda = 10, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype = "bootstrap")
?estimatePois
?mle
?mle
?logLik
?standardError
?rpois
?replicate
?return
library(easyPois)
# after building relevant functions I repeat the below three steps.
devtools::load_all()
?logLik
?mle
?standardError
?estimatePois
set.seed(10)
y <- rpois(1000,5)
logLik(y, 10)
mle(y)
standardError(y, SEtype= "bootstrap", B= 300)
standardError(y, SEtype= "test")
standardError(y, SEtype= "basic")
standardError(y, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype = "bootstrap")
estimatePois(y, lambda = 10, SEtype= "basic")
set.seed(10)
y <- sample(x=1:1000, size=1000, replace=TRUE)
logLik(y, 10)
mle(y)
standardError(y, SEtype= "bootstrap", B= 300)
standardError(y, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype = "bootstrap")
estimatePois(y, lambda = 10, SEtype= "basic")
library(easyPois)
set.seed(10)
y <- sample(x=1:1000, size=1000, replace=TRUE)
logLik(y, 10)
mle(y)
standardError(y, SEtype= "bootstrap", B= 300)
standardError(y, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype = "bootstrap")
set.seed(10)
y <- sample(x=1:1000, size=100, replace=TRUE)
logLik(y, 10)
logLik(y, 100)
logLik(y, 5)
logLik(y, 2)
set.seed(10)
y <- sample(x=1:1000, size=20, replace=TRUE)
logLik(y, 2)
set.seed(10)
y <- sample(x=1:10, size=20, replace=TRUE)
logLik(y, 8)
mle(y)
standardError(y, SEtype= "bootstrap", B= 300)
standardError(y, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype = "bootstrap")
estimatePois(y, lambda = 10, SEtype= "basic")
set.seed(10)
y <- sample(x=1:10, size=2000, replace=TRUE)
logLik(y, 8)
mle(y)
standardError(y, SEtype= "bootstrap", B= 300)
standardError(y, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype = "bootstrap")
estimatePois(y, lambda = 10, SEtype= "basic")
estimatePois(y, lambda = 10, SEtype= "basic")
