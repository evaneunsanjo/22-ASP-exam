logLik <- function(y, lambda){
likelihood = -length(y) * lambda - sum(log(exp(lfactorial(y)))) + log(lambda) * sum(y)
return(likelihood)}
?lfactorial
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
logLik(y, 10)
?logLik
?'logLik'
mle <- function(y){
if (any(y < 0)) {
stop("For maximum likelihood, values of y must be greater or equal to 0")
}
return(sum(y)/length(y))
}
y = c(1:10)
mle(y)
se<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(nboot <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
se(y, SEtype= "bootstrap", B= 300)
se(y, SEtype= "test")
se<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
se(y, SEtype= "bootstrap", B= 300)
se(y, SEtype= "test")
se(y, SEtype= "bootstrap")
se(y, SEtype= "basic")
?mle
??mle
?standardError
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap", B=200)){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
set.seed(10)
y <- sample(x=1:10, size=10, replace=TRUE)
estimatePois_basic <- estimatePois(y, 2, "basic")
standardError<- function(y, SEtype = c("basic", "bootstrap"), B=200){
mle <- function(y){return(sum(y)/length(y))}
if (SEtype == "basic") {
se <- sqrt(mle(y) /length(y))
return(se)
}
if (SEtype == "bootstrap") {
matrix <- replicate(B, {
return(sample(y, length(y), replace = T))
})
bootmle <- apply(matrix, 2, mle)
bootse <- sd(bootmle)
return(bootse)
}
if(any(y < 0)) {
stop("For log likelihood, values of y must be greater or equal to 0")
}
if(B <= 0) {
stop("For bootstrapping, B must be greater than 0.")
}
if (!(SEtype %in% c("basic", "bootstrap"))) {
stop("Please insert a defined method for SEtype.")
}
}
estimatePois_boot <- estimatePois(y, 2, "bootstrap")
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap"), B=200){
y <- y
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap"), B=200){
y <- y
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
estimatePois_basic <- estimatePois(y, 2, "basic")
estimatePois <- function(y, lambda, SEtype=c("basic", "bootstrap"), B=200){
y <- y
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype = c("basic", "bootstrap"), B)
estimateP <- new("PoisMLE", y=y, LL = LL, MLE = MLE, SE = SE,SEtype = SEtype)
return(estimateP)
}
estimatePois(y, lambda = 10, SEtype= "bootstrap")
estimatePois_basic <- estimatePois(y, 2, "basic")
estimatePois <- function(y, lambda,
SEtype = c("basic", "bootstrap"), B=200){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
estimateP <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(estimateP)
}
estimatePois(y, lambda = 10, SEtype= "bootstrap")
estimatePois <- function(y, lambda,
SEtype = c("basic", "bootstrap"), B=200){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
estimateP <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(estimateP)
}
estimatePois(y, lambda = 10, SEtype= "bootstrap")
estimatePois <-function(y, lambda,
SEtype = c("basic", "bootstrap"), B=100){
MLE <- mle(y)
LL <- logLik(y, lambda)
SE <- standardError(y, SEtype, B)
PoisMLE_obj <- new("PoisMLE", y=y, LL=LL, MLE=MLE, SE=SE, SEtype=SEtype)
return(PoisMLE_obj)
}
estimatePois_basic <- estimatePois(y, 2, "basic")
